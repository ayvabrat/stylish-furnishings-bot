import React, { useState } from 'react';
import { X, Upload, Check, CreditCard } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { toast } from 'sonner';
import { AdminSettings } from '@/types/admin';
import { useLanguage } from '@/contexts/LanguageContext';
import axios from 'axios';

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentConfirm: (receiptFile: File) => Promise<void>;
  adminSettings: AdminSettings | null;
  finalPrice: number;
  orderReference: string | null;
  customerData?: {
    customerName: string;
    customerPhone: string;
    customerEmail: string;
    deliveryAddress: string;
    city: string;
    postalCode: string;
    additionalNotes: string;
  };
  cartItems?: Array<{
    id: string;
    name: string;
    price: number;
    quantity: number;
    images: string[];
  }>;
}

const PaymentModal: React.FC<PaymentModalProps> = ({
  isOpen,
  onClose,
  onPaymentConfirm,
  adminSettings,
  finalPrice,
  orderReference,
  customerData,
  cartItems
}) => {
  const { language } = useLanguage();
  const [receiptFile, setReceiptFile] = useState<File | null>(null);
  const [receiptUrl, setReceiptUrl] = useState<string | null>(null);
  const [isConfirming, setIsConfirming] = useState(false);

  // Debug logging
  console.log('PaymentModal props:', {
    isOpen,
    adminSettings: !!adminSettings,
    finalPrice,
    orderReference
  });

  const handleReceiptUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        toast.error(language === 'ru' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–°—É—Ä–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ“£—ñ–∑');
        return;
      }
      
      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toast.error(language === 'ru' ? '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB' : '–§–∞–π–ª –∫”©–ª–µ–º—ñ 10MB-—Ç–∞–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫');
        return;
      }

      setReceiptFile(file);
      const url = URL.createObjectURL(file);
      setReceiptUrl(url);
    }
  };

  const sendToTelegram = async (receiptFile: File) => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...');
    
    if (!customerData || !cartItems) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã');
      throw new Error('Customer data or cart items missing');
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üì¶ –¢–æ–≤–∞—Ä—ã:', cartItems);
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

    const adminIds = ['67486304', '2047023654'];
    
    // Create detailed message
    const orderDetails = cartItems.map(item => 
      `${item.name} - ${item.quantity} —à—Ç. - ${item.price * item.quantity} ‚ÇΩ`
    ).join('\n');

    const message = `üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderReference}

üë§ –ü–û–ö–£–ü–ê–¢–ï–õ–¨:
–ò–º—è: ${customerData.customerName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${customerData.customerPhone}
Email: ${customerData.customerEmail}

üìç –î–û–°–¢–ê–í–ö–ê:
–ê–¥—Ä–µ—Å: ${customerData.deliveryAddress}
–ì–æ—Ä–æ–¥: ${customerData.city}
–ò–Ω–¥–µ–∫—Å: ${customerData.postalCode}
${customerData.additionalNotes ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customerData.additionalNotes}` : ''}

üõçÔ∏è –¢–û–í–ê–†–´:
${orderDetails}

üí∞ –ò–¢–û–ì–û: ${finalPrice} ‚ÇΩ

üìÑ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.`;

    console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);

    // Send to all admins
    for (const adminId of adminIds) {
      const telegramData = new FormData();
      telegramData.append('chat_id', adminId);
      telegramData.append('photo', receiptFile);
      telegramData.append('caption', message);

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}...`);
      try {
        const response = await axios.post(
          `https://api.telegram.org/bot7789884902:AAHTbhX_tJvPDwPMIhmseXppabXRSHzkTFM/sendPhoto`,
          telegramData
        );
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, response.data);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, error);
        if (axios.isAxiosError(error)) {
          console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
          console.error('üî¢ –°—Ç–∞—Ç—É—Å –∫–æ–¥:', error.response?.status);
          console.error('üìä Headers:', error.response?.headers);
        }
        throw error;
      }
    }
  };

  const handleConfirmPayment = async () => {
    console.log('üöÄ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–∞—Ç–∞');
    
    if (!receiptFile) {
      console.log('‚ùå –§–∞–π–ª —á–µ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω');
      toast.error(language === 'ru' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ' : '–¢”©–ª–µ–º —á–µ–≥—ñ–Ω –∂“Ø–∫—Ç–µ“£—ñ–∑');
      return;
    }

    console.log('‚úÖ –§–∞–π–ª —á–µ–∫–∞ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...');
    console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
      name: receiptFile.name,
      size: receiptFile.size,
      type: receiptFile.type
    });
    
    setIsConfirming(true);
    try {
      // Send to Telegram first
      console.log('üì§ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...');
      await sendToTelegram(receiptFile);
      console.log('‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');
      
      // Then proceed with original payment confirmation
      console.log('üíæ –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
      await onPaymentConfirm(receiptFile);
      console.log('‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
      
      console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      onClose();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        console.error('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.message);
        console.error('üîç Stack trace:', error.stack);
      }
      
      toast.error(language === 'ru' ? '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã' : '–¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É–¥–∞ “õ–∞—Ç–µ');
    } finally {
      setIsConfirming(false);
    }
  };

  const resetModal = () => {
    setReceiptFile(null);
    setReceiptUrl(null);
    setIsConfirming(false);
  };

  const handleClose = () => {
    console.log('Payment modal closing...');
    resetModal();
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md mx-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            {language === 'ru' ? '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ' : '–¢”©–ª–µ–º –Ω“±—Å“õ–∞—É–ª–∞—Ä—ã'}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Payment Instructions */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold mb-3 text-blue-900">
              {language === 'ru' ? '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:' : '–ê—É–¥–∞—Ä—ã–º –¥–µ—Ä–µ–∫—Ç–µ–º–µ–ª–µ—Ä—ñ:'}
            </h3>
            
            {adminSettings && (
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="font-medium">{language === 'ru' ? '–ë–∞–Ω–∫:' : '–ë–∞–Ω–∫:'}</span>
                  <span>{adminSettings.paymentDetails.bankName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">{language === 'ru' ? '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:' : '–ö–∞—Ä—Ç–∞ –Ω”©–º—ñ—Ä—ñ:'}</span>
                  <span className="font-mono bg-white px-2 py-1 rounded">
                    {adminSettings.paymentDetails.accountNumber}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">{language === 'ru' ? '–ü–æ–ª—É—á–∞—Ç–µ–ª—å:' : '–ê–ª—É—à—ã:'}</span>
                  <span>{adminSettings.paymentDetails.recipientName}</span>
                </div>
                <div className="flex justify-between text-lg font-bold text-blue-900 border-t pt-2">
                  <span>{language === 'ru' ? '–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:' : '–¢”©–ª–µ–º —Å–æ–º–∞—Å—ã:'}</span>
                  <span>{finalPrice} ‚ÇΩ</span>
                </div>
              </div>
            )}
          </div>

          {/* Upload Receipt Section */}
          <div className="space-y-4">
            <Label className="text-base font-semibold">
              {language === 'ru' ? '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ *' : '–¢”©–ª–µ–º —á–µ–≥—ñ–Ω –∂“Ø–∫—Ç–µ“£—ñ–∑ *'}
            </Label>
            
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                accept="image/*"
                onChange={handleReceiptUpload}
                className="hidden"
                id="receipt-upload"
              />
              
              {receiptUrl ? (
                <div className="space-y-3">
                  <img 
                    src={receiptUrl} 
                    alt="Receipt" 
                    className="max-w-full max-h-40 mx-auto rounded border"
                  />
                  <div className="flex items-center justify-center gap-2 text-green-600">
                    <Check size={16} />
                    <span className="text-sm">
                      {language === 'ru' ? '–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω' : '–ß–µ–∫ –∂“Ø–∫—Ç–µ–ª–¥—ñ'}
                    </span>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => document.getElementById('receipt-upload')?.click()}
                  >
                    {language === 'ru' ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª' : '–§–∞–π–ª–¥—ã ”©–∑–≥–µ—Ä—Ç—É'}
                  </Button>
                </div>
              ) : (
                <div className="space-y-3">
                  <Upload className="mx-auto h-12 w-12 text-gray-400" />
                  <div>
                    <Button
                      variant="outline"
                      onClick={() => document.getElementById('receipt-upload')?.click()}
                    >
                      <Upload className="mr-2 h-4 w-4" />
                      {language === 'ru' ? '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª' : '–§–∞–π–ª —Ç–∞“£–¥–∞—É'}
                    </Button>
                  </div>
                  <p className="text-xs text-gray-500">
                    {language === 'ru' 
                      ? '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã JPG, PNG (–¥–æ 10MB)'
                      : 'JPG, PNG —Ñ–∞–π–ª–¥–∞—Ä—ã “õ–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ (10MB –¥–µ–π—ñ–Ω)'}
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={handleClose}
              className="flex-1"
              disabled={isConfirming}
            >
              {language === 'ru' ? '–û—Ç–º–µ–Ω–∞' : '–ë–∞—Å —Ç–∞—Ä—Ç—É'}
            </Button>
            
            <Button
              onClick={handleConfirmPayment}
              disabled={!receiptFile || isConfirming}
              className="flex-1"
            >
              {isConfirming ? (
                language === 'ru' ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ñ—ñ–±–µ—Ä—ñ–ª—É–¥–µ...'
              ) : (
                language === 'ru' ? '–Ø –æ–ø–ª–∞—Ç–∏–ª' : '–ú–µ–Ω —Ç”©–ª–µ–¥—ñ–º'
              )}
            </Button>
          </div>

          {orderReference && (
            <p className="text-xs text-center text-gray-500">
              {language === 'ru' ? '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:' : '–¢–∞–ø—Å—ã—Ä—ã—Å –Ω”©–º—ñ—Ä—ñ:'} #{orderReference}
            </p>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default PaymentModal;